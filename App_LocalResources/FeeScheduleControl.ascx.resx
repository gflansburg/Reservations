<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="feesLabel.Text" xml:space="preserve">
    <value>Fees:</value>
  </data>
  <data name="Flat.Text" xml:space="preserve">
    <value>Flat</value>
  </data>
  <data name="forEveryLabel.Text" xml:space="preserve">
    <value>for every</value>
  </data>
  <data name="scheduleFeeLabel.Text" xml:space="preserve">
    <value>Schedule:</value>
  </data>
  <data name="scheduleLabel.Text" xml:space="preserve">
    <value>Fee Schedule:</value>
  </data>
  <data name="Seasonal.Text" xml:space="preserve">
    <value>Seasonal</value>
  </data>
  <data name="StartOn.Text" xml:space="preserve">
    <value>Start on:</value>
  </data>
  <data name="cancellationFeeLabel.Help" xml:space="preserve">
    <value>Enter the amount to charge for cancelling a reservation. Must be less than or equal to the Reservation Fee, because it will be substracted from the amount to refund upon cancellation.</value>
  </data>
  <data name="cancellationFeeLabel.Text" xml:space="preserve">
    <value>Cancellation Fee:</value>
  </data>
  <data name="cancellationFeeTypeLabel.Text" xml:space="preserve">
    <value>per reservation.</value>
  </data>
  <data name="reschedulingFeeLabel.Help" xml:space="preserve">
    <value>Enter the amount to charge for rescheduling a reservation.</value>
  </data>
  <data name="reschedulingFeeLabel.Text" xml:space="preserve">
    <value>Reschedule Fee:</value>
  </data>
  <data name="reschedulingFeeTypeLabel.Text" xml:space="preserve">
    <value>per reservation.</value>
  </data>
  <data name="scheduleLabel.Help" xml:space="preserve">
    <value>Specify what the fees will be for booking, re-scheduling, or canceling reservations.</value>
  </data>
  <data name="schedulingFeeLabel.Help" xml:space="preserve">
    <value>Enter the amount to charge for scheduling a reservation.</value>
  </data>
  <data name="schedulingFeeLabel.Text" xml:space="preserve">
    <value>Reservation Fee:</value>
  </data>
  <data name="schedulingFeeTypeLabel.Text" xml:space="preserve">
    <value>for every</value>
  </data>
  <data name="Add.Text" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="days.Text" xml:space="preserve">
    <value>day(s)</value>
  </data>
  <data name="Delete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="EndBy.Text" xml:space="preserve">
    <value>End by:</value>
  </data>
  <data name="Free.Text" xml:space="preserve">
    <value>Free</value>
  </data>
  <data name="From.Text" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="hours.Text" xml:space="preserve">
    <value>hour(s)</value>
  </data>
  <data name="InvalidDateRange.Text" xml:space="preserve">
    <value>The selected date range is invalid. Please make sure the start and end days are valid for the specified month, and that they do not overlap an existing entry in the list below.&lt;br/&gt;&lt;br/&gt;</value>
  </data>
  <data name="InvalidFees.Text" xml:space="preserve">
    <value>One or more of the entries below are incorrect. Please check your input and try again.</value>
  </data>
  <data name="minutes.Text" xml:space="preserve">
    <value>minute(s)</value>
  </data>
  <data name="noSeasonalFeesLabel.Text" xml:space="preserve">
    <value>Seasonal fees have not been configured yet.</value>
  </data>
  <data name="seasonalCancellationFeeLabel.Help" xml:space="preserve">
    <value>Enter the amount to charge for cancelling a reservation. Must be less than or equal to the Reservation Fee, because it will be substracted from the amount to refund upon cancellation.</value>
  </data>
  <data name="seasonalCancellationFeeLabel.Text" xml:space="preserve">
    <value>Cancellation Fee:</value>
  </data>
  <data name="seasonalReschedulingFeeLabel.Help" xml:space="preserve">
    <value>Enter the amount to charge for rescheduling a reservation.</value>
  </data>
  <data name="seasonalReschedulingFeeLabel.Text" xml:space="preserve">
    <value>Reschedule Fee:</value>
  </data>
  <data name="seasonalSchedulingFeeLabel.Help" xml:space="preserve">
    <value>Enter the amount to charge for scheduling a reservation.</value>
  </data>
  <data name="seasonalSchedulingFeeLabel.Text" xml:space="preserve">
    <value>Reservation Fee:</value>
  </data>
  <data name="to.Text" xml:space="preserve">
    <value>to</value>
  </data>
  <data name="freeReservationsLabel.Text" xml:space="preserve">
    <value>Reservations are free to schedule, reschedule, and cancel.</value>
  </data>
  <data name="InvalidSeasonalFeeList.Text" xml:space="preserve">
    <value>The list of seasonal fees must cover a period of 1 year. There cannot be any gaps or overlaps.&lt;br/&gt;&lt;br/&gt;</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Save.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="depositFeeLabel.Help" xml:space="preserve">
    <value>Enter the amount to charge per reservation. This amount will be charged regardless of the duration of the reservation and in addition to the reservation fee.</value>
  </data>
  <data name="depositFeeLabel.Text" xml:space="preserve">
    <value>Deposit Fee:</value>
  </data>
  <data name="depositFeeTypeLabel.Text" xml:space="preserve">
    <value>per reservation.</value>
  </data>
</root>